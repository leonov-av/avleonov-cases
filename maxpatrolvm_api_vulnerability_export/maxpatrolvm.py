import requests
from urllib3.exceptions import InsecureRequestWarning
from urllib3 import disable_warnings
disable_warnings(InsecureRequestWarning)

mpvm_url = "https://maxpatrolvm.corporation.com"
mpvm_user = "user"
mpvm_password = "password"
mpvm_client_secret = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX" # ClientSecret param from /var/lib/deployer/role_instances/Core/params.yaml

# Getting Authentication token

url = mpvm_url + ':3334/connect/token'

headers = {
    'content-type': 'application/x-www-form-urlencoded',
}

data = {
            'username': mpvm_user,
            'password': mpvm_password,
            'client_id': 'mpx',
            'client_secret': mpvm_client_secret,
            'grant_type': 'password',
            'response_type': 'id_token',
            'scope': 'mpx.api'
        }


x = requests.post(url, data=data, headers=headers, verify=False)
token = x.json()['access_token']
print(token)

# Getting pdql token for request

headers = {
    'authority': 'maxpatrolvm.corporation.com',
    'accept': 'application/json, text/plain, */*',
    'content-type': 'application/json;charset=UTF-8',
    'authorization': 'Bearer ' + token
}

json_data = {
    'pdql': 'filter((VulnerPassport.IsTrend = true)) | select(@VulnerPassport, VulnerPassport.Score, VulnerPassport.Description, VulnerPassport.IssueTime, VulnerPassport.IsTrendSince, VulnerPassport.CVEs) | sort(@VulnerPassport DESC)',
    'selectedGroupIds': [],
    'additionalFilterParameters': {
        'groupIds': [],
        'assetIds': [],
    },
    'includeNestedGroups': True,
    'utcOffset': '+03:00',
}

response = requests.post(
    mpvm_url + ":443/api/assets_temporal_readmodel/v1/assets_grid",
    headers=headers,
    json=json_data,
    verify=False,
)
pdql_token = response.json()['token']

params = {
    'pdqlToken': pdql_token,
}

# Getting row_count for pdql token

response = requests.get(
    mpvm_url + ":443/api/assets_temporal_readmodel/v1/assets_grid/row_count",
    params=params,
    headers=headers,
    verify=False,
)

print(response.text)

# Getting results for PDQL token

stop = False
all_records = list()
offset = 0
while not stop:
    params = {
        'limit': '50',
        'offset': str(offset),
        'pdqlToken': pdql_token,
    }

    response = requests.get(
        mpvm_url + ":443/api/assets_temporal_readmodel/v1/assets_grid/data",
        params=params,
        headers=headers,
        verify=False,
    )
    temp_records = response.json()['records']
    all_records += temp_records
    print(len(all_records))
    if temp_records == []:
        stop = True
    offset += 50

import json
print(json.dumps(all_records[0], indent=4))

''' Example of output: 

{
    "@VulnerPassport": {
        "name": "...",
        "id": "...",
        "severityRating": "Critical",
        "internalId": "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
    },
    "VulnerPassport.Score": "8,3",
    "VulnerPassport.Description": "...",
    "VulnerPassport.IssueTime": "2023-04-18T00:00:00Z",
    "VulnerPassport.IsTrendSince": "2023-05-10T15:04:00Z",
    "VulnerPassport.CVEs": "CVE-XXXX-XXXX"
}
'''
